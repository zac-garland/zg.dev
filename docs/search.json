[
  {
    "objectID": "index.html#example-import-from-observable",
    "href": "index.html#example-import-from-observable",
    "title": "a quarto.doc",
    "section": "example import from observable",
    "text": "example import from observable\n\nimport {pieChart, surveyCompareBars, surveyHistograms, longList, bigPercentage, bigPercentageWithDescription} from \"d/cf42a44ac2f24b7a\"\n\n\n\n\n\n\n\nroles = d3.tsvParse(`Role   dataRole    pct count\nHobbyist    support 30.6    174\nFront-end developer support 14.2    81\nAcademic or government researcher   support 14.2    81\nData analyst or business analyst    primary 9.65    55\nData scientist  primary 7.37    42\nData architect  primary 3.3 19\nStudent support 5.61    32\nEducator    support 5.09    29\nJournalist  support 2.98    17\nOther   support 6.32    39`, d3.autoType)\n\n\n\n\n\n\n\npieChart(roles, \"Role\", \"count\", \"dataRole\", \"Responses for data-centered roles\")"
  },
  {
    "objectID": "index.html#that-looks-like-r-code",
    "href": "index.html#that-looks-like-r-code",
    "title": "a quarto.doc",
    "section": "& that looks like R code",
    "text": "& that looks like R code\n\nlibrary(leaflet)\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(lng=174.768, lat=-36.852, popup=\"The birthplace of R\")"
  },
  {
    "objectID": "index.html#penguins-reactivity",
    "href": "index.html#penguins-reactivity",
    "title": "a quarto.doc",
    "section": "penguins & reactivity",
    "text": "penguins & reactivity\nA simple example based on Allison Horstâ€™s Palmer Penguins dataset. Here we look at how penguin body mass varies across both sex and species (use the provided inputs to filter the dataset by bill length and island):\n\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotData\n\n\n\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n\n\n\n\n\n\n\n\n\nInputs.table(filtered)\n\n\n\n\n\n\n\n\n\n\nfiltered = transpose(data).filter(function(penguin) {\n  return bill_length_min < penguin.bill_length &&\n         islands.includes(penguin.island);\n})\n\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"a quarto.doc\"\nformat:\n  html:\n    toc: false\n    echo: false\n    message: false\n    warning: false\n    keep-hidden: true\n    code-tools: true\n---\n\n```{r,include = FALSE}\nojs_define(\n  data = readr::read_csv(\"https://raw.githubusercontent.com/quarto-dev/quarto-web/8159986c9ea1c956b9340663b2a4f03f3b75c9e2/docs/interactive/ojs/examples/palmer-penguins.csv\")\n  )\n```\n\n## example import from observable\n\n```{ojs}\nimport {pieChart, surveyCompareBars, surveyHistograms, longList, bigPercentage, bigPercentageWithDescription} from \"d/cf42a44ac2f24b7a\"\n\n```\n\n```{ojs}\nroles = d3.tsvParse(`Role   dataRole    pct count\nHobbyist    support 30.6    174\nFront-end developer support 14.2    81\nAcademic or government researcher   support 14.2    81\nData analyst or business analyst    primary 9.65    55\nData scientist  primary 7.37    42\nData architect  primary 3.3 19\nStudent support 5.61    32\nEducator    support 5.09    29\nJournalist  support 2.98    17\nOther   support 6.32    39`, d3.autoType)\n```\n\n\n```{ojs}\npieChart(roles, \"Role\", \"count\", \"dataRole\", \"Responses for data-centered roles\")\n```\n\n## that looks like js & html\n\n<div id=\"container\" style=\"height: 500px; min-width: 310px; max-width: 800px; margin: 0 auto\"></div>\n<script src=\"https://code.highcharts.com/maps/highmaps.js\"></script>\n<script src=\"https://code.highcharts.com/maps/modules/data.js\"></script>\n<script src=\"https://code.highcharts.com/maps/modules/drilldown.js\"></script>\n<script src=\"https://code.highcharts.com/maps/modules/exporting.js\"></script>\n<script src=\"https://code.highcharts.com/maps/modules/offline-exporting.js\"></script>\n<script src=\"https://code.highcharts.com/mapdata/countries/us/us-all.js\"></script>\n\n<link href=\"https://netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css\" rel=\"stylesheet\">\n\n\n```{js}\n/*\nTODO:\n- Check data labels after drilling. Label rank? New positions?\n*/\n\ndata = Highcharts.geojson(Highcharts.maps['countries/us/us-all']);\nconst separators = Highcharts.geojson(Highcharts.maps['countries/us/us-all'], 'mapline');\n\n// Set drilldown pointers\ndata.forEach((d, i) => {\n  d.drilldown = d.properties['hc-key'];\n  d.value = i; // Non-random bogus data\n});\n\nfunction getScript(url, cb) {\n  const script = document.createElement('script');\n  script.src = url;\n  script.onload = cb;\n  document.head.appendChild(script);\n}\n\n// Instantiate the map\nHighcharts.mapChart('container', {\n  chart: {\n    events: {\n      drilldown: function (e) {\n        if (!e.seriesOptions) {\n          const chart = this,\n            mapKey = 'countries/us/' + e.point.drilldown + '-all';\n\n          // Handle error, the timeout is cleared on success\n          let fail = setTimeout(() => {\n            if (!Highcharts.maps[mapKey]) {\n              chart.showLoading('<i class=\"icon-frown\"></i> Failed loading ' + e.point.name);\n              fail = setTimeout(() => {\n                chart.hideLoading();\n              }, 1000);\n            }\n          }, 3000);\n\n          // Show the spinner\n          chart.showLoading('<i class=\"icon-spinner icon-spin icon-3x\"></i>'); // Font Awesome spinner\n\n          // Load the drilldown map\n          getScript('https://code.highcharts.com/mapdata/' + mapKey + '.js', () => {\n            data = Highcharts.geojson(Highcharts.maps[mapKey]);\n\n            // Set a non-random bogus value\n            data.forEach((d, i) => {\n              d.value = i;\n            });\n\n            // Hide loading and add series\n            chart.hideLoading();\n            clearTimeout(fail);\n            chart.addSeriesAsDrilldown(e.point, {\n              name: e.point.name,\n              data: data,\n              dataLabels: {\n                enabled: true,\n                format: '{point.name}'\n              }\n            });\n          });\n        }\n\n        this.setTitle(null, { text: e.point.name });\n      },\n      drillup: function () {\n        this.setTitle(null, { text: '' });\n      }\n    }\n  },\n\n  title: {\n    text: 'Highcharts Map Drilldown'\n  },\n\n  subtitle: {\n    text: '',\n    floating: true,\n    align: 'right',\n    y: 50,\n    style: {\n      fontSize: '16px'\n    }\n  },\n\n  colorAxis: {\n    min: 0,\n    minColor: '#E6E7E8',\n    maxColor: '#005645'\n  },\n\n  mapNavigation: {\n    enabled: true,\n    buttonOptions: {\n      verticalAlign: 'bottom'\n    }\n  },\n\n  plotOptions: {\n    map: {\n      states: {\n        hover: {\n          color: '#EEDD66'\n        }\n      }\n    }\n  },\n\n  series: [{\n    data: data,\n    name: 'USA',\n    dataLabels: {\n      enabled: true,\n      format: '{point.properties.postal-code}'\n    }\n  }, {\n    type: 'mapline',\n    data: separators,\n    color: 'silver',\n    enableMouseTracking: false,\n    animation: {\n      duration: 500\n    }\n  }],\n\n  drilldown: {\n    activeDataLabelStyle: {\n      color: '#FFFFFF',\n      textDecoration: 'none',\n      textOutline: '1px #000000'\n    },\n    drillUpButton: {\n      relativeTo: 'spacingBox',\n      position: {\n        x: 0,\n        y: 60\n      }\n    }\n  }\n});\n\n```\n\n## & that looks like R code\n\n```r\nlibrary(leaflet)\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(lng=174.768, lat=-36.852, popup=\"The birthplace of R\")\n```\n\n## penguins & reactivity\n\n\nA simple example based on Allison Horst's [Palmer Penguins](https://allisonhorst.github.io/palmerpenguins/) dataset. Here we look at how penguin body mass varies across both sex and species (use the provided inputs to filter the dataset by bill length and island):\n\n```ojs\n//| panel: input\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n```\n\n::: panel-tabset\n\n\n\n\n\n## Plot\n\n```ojs\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n```\n\n## Data\n\n```ojs\nInputs.table(filtered)\n```\n\n\n\n:::\n\n\n```ojs\nfiltered = transpose(data).filter(function(penguin) {\n  return bill_length_min < penguin.bill_length &&\n         islands.includes(penguin.island);\n})\n```"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#that-looks-like-js",
    "href": "index.html#that-looks-like-js",
    "title": "a quarto.doc",
    "section": "that looks like js",
    "text": "that looks like js\n\n\n\n\n\n\n\n\n\n\n\n/*\nTODO:\n- Check data labels after drilling. Label rank? New positions?\n*/\n\ndata = Highcharts.geojson(Highcharts.maps['countries/us/us-all']);\nconst separators = Highcharts.geojson(Highcharts.maps['countries/us/us-all'], 'mapline');\n\n// Set drilldown pointers\ndata.forEach((d, i) => {\n  d.drilldown = d.properties['hc-key'];\n  d.value = i; // Non-random bogus data\n});\n\nfunction getScript(url, cb) {\n  const script = document.createElement('script');\n  script.src = url;\n  script.onload = cb;\n  document.head.appendChild(script);\n}\n\n// Instantiate the map\nHighcharts.mapChart('container', {\n  chart: {\n    events: {\n      drilldown: function (e) {\n        if (!e.seriesOptions) {\n          const chart = this,\n            mapKey = 'countries/us/' + e.point.drilldown + '-all';\n\n          // Handle error, the timeout is cleared on success\n          let fail = setTimeout(() => {\n            if (!Highcharts.maps[mapKey]) {\n              chart.showLoading('<i class=\"icon-frown\"></i> Failed loading ' + e.point.name);\n              fail = setTimeout(() => {\n                chart.hideLoading();\n              }, 1000);\n            }\n          }, 3000);\n\n          // Show the spinner\n          chart.showLoading('<i class=\"icon-spinner icon-spin icon-3x\"></i>'); // Font Awesome spinner\n\n          // Load the drilldown map\n          getScript('https://code.highcharts.com/mapdata/' + mapKey + '.js', () => {\n            data = Highcharts.geojson(Highcharts.maps[mapKey]);\n\n            // Set a non-random bogus value\n            data.forEach((d, i) => {\n              d.value = i;\n            });\n\n            // Hide loading and add series\n            chart.hideLoading();\n            clearTimeout(fail);\n            chart.addSeriesAsDrilldown(e.point, {\n              name: e.point.name,\n              data: data,\n              dataLabels: {\n                enabled: true,\n                format: '{point.name}'\n              }\n            });\n          });\n        }\n\n        this.setTitle(null, { text: e.point.name });\n      },\n      drillup: function () {\n        this.setTitle(null, { text: '' });\n      }\n    }\n  },\n\n  title: {\n    text: 'Highcharts Map Drilldown'\n  },\n\n  subtitle: {\n    text: '',\n    floating: true,\n    align: 'right',\n    y: 50,\n    style: {\n      fontSize: '16px'\n    }\n  },\n\n  colorAxis: {\n    min: 0,\n    minColor: '#E6E7E8',\n    maxColor: '#005645'\n  },\n\n  mapNavigation: {\n    enabled: true,\n    buttonOptions: {\n      verticalAlign: 'bottom'\n    }\n  },\n\n  plotOptions: {\n    map: {\n      states: {\n        hover: {\n          color: '#EEDD66'\n        }\n      }\n    }\n  },\n\n  series: [{\n    data: data,\n    name: 'USA',\n    dataLabels: {\n      enabled: true,\n      format: '{point.properties.postal-code}'\n    }\n  }, {\n    type: 'mapline',\n    data: separators,\n    color: 'silver',\n    enableMouseTracking: false,\n    animation: {\n      duration: 500\n    }\n  }],\n\n  drilldown: {\n    activeDataLabelStyle: {\n      color: '#FFFFFF',\n      textDecoration: 'none',\n      textOutline: '1px #000000'\n    },\n    drillUpButton: {\n      relativeTo: 'spacingBox',\n      position: {\n        x: 0,\n        y: 60\n      }\n    }\n  }\n});\n\n\n\nlibrary(tidyverse)\n\nâ”€â”€ Attaching packages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 1.3.1 â”€â”€\n\n\nâœ“ ggplot2 3.3.5     âœ“ purrr   0.3.4\nâœ“ tibble  3.1.6     âœ“ dplyr   1.0.7\nâœ“ tidyr   1.1.4     âœ“ stringr 1.4.0\nâœ“ readr   2.1.1     âœ“ forcats 0.5.1\n\n\nâ”€â”€ Conflicts â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\n\nlibrary(highcharter)\n\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\ndata <- tibble(\n  country = \n    c(\"PT\", \"IE\", \"GB\", \"IS\",\n      \n      \"NO\", \"SE\", \"DK\", \"DE\", \"NL\", \"BE\", \"LU\", \"ES\", \"FR\", \"PL\", \"CZ\", \"AT\",\n      \"CH\", \"LI\", \"SK\", \"HU\", \"SI\", \"IT\", \"SM\", \"HR\", \"BA\", \"YF\", \"ME\", \"AL\", \"MK\",\n      \n      \"FI\", \"EE\", \"LV\", \"LT\", \"BY\", \"UA\", \"MD\", \"RO\", \"BG\", \"GR\", \"TR\", \"CY\",\n      \n      \"RU\"),  \n  tz = c(rep(\"UTC\", 4), rep(\"UTC + 1\",25), rep(\"UCT + 2\",12), \"UTC + 3\")\n  )\n\n# auxiliar variable\ndata <- data %>% \n  mutate(value = cumsum(!duplicated(tz)))\n\n\n# now we'll create the dataClasses\ndta_clss <- data %>% \n  mutate(value = cumsum(!duplicated(tz))) %>% \n  group_by(tz) %>% \n  summarise(value = unique(value)) %>% \n  arrange(value) %>% \n  rename(name = tz, from = value) %>% \n  mutate(to = from + 1) %>% \n  list_parse()\n\nhighcharter::renderHighchart({\nhcmap(\n  map = \"custom/europe\",\n  data = data, \n  joinBy = c(\"iso-a2\",\"country\"),\n  name = \"Time zone\",\n  value = \"value\",\n  tooltip = list(pointFormat = \"{point.name} {point.tz}\"),\n  dataLabels = list(enabled = TRUE, format = \"{point.country}\")\n  ) %>%\n  hc_colorAxis(\n    dataClassColor = \"category\",\n    dataClasses = dta_clss\n    ) %>% \n  hc_title(text = \"Europe Time Zones\")\n  \n  \n})"
  },
  {
    "objectID": "index.html#that-looks-like-js-html",
    "href": "index.html#that-looks-like-js-html",
    "title": "a quarto.doc",
    "section": "that looks like js & html",
    "text": "that looks like js & html\n\n\n\n\n\n\n\n\n\n\n\n/*\nTODO:\n- Check data labels after drilling. Label rank? New positions?\n*/\n\ndata = Highcharts.geojson(Highcharts.maps['countries/us/us-all']);\nconst separators = Highcharts.geojson(Highcharts.maps['countries/us/us-all'], 'mapline');\n\n// Set drilldown pointers\ndata.forEach((d, i) => {\n  d.drilldown = d.properties['hc-key'];\n  d.value = i; // Non-random bogus data\n});\n\nfunction getScript(url, cb) {\n  const script = document.createElement('script');\n  script.src = url;\n  script.onload = cb;\n  document.head.appendChild(script);\n}\n\n// Instantiate the map\nHighcharts.mapChart('container', {\n  chart: {\n    events: {\n      drilldown: function (e) {\n        if (!e.seriesOptions) {\n          const chart = this,\n            mapKey = 'countries/us/' + e.point.drilldown + '-all';\n\n          // Handle error, the timeout is cleared on success\n          let fail = setTimeout(() => {\n            if (!Highcharts.maps[mapKey]) {\n              chart.showLoading('<i class=\"icon-frown\"></i> Failed loading ' + e.point.name);\n              fail = setTimeout(() => {\n                chart.hideLoading();\n              }, 1000);\n            }\n          }, 3000);\n\n          // Show the spinner\n          chart.showLoading('<i class=\"icon-spinner icon-spin icon-3x\"></i>'); // Font Awesome spinner\n\n          // Load the drilldown map\n          getScript('https://code.highcharts.com/mapdata/' + mapKey + '.js', () => {\n            data = Highcharts.geojson(Highcharts.maps[mapKey]);\n\n            // Set a non-random bogus value\n            data.forEach((d, i) => {\n              d.value = i;\n            });\n\n            // Hide loading and add series\n            chart.hideLoading();\n            clearTimeout(fail);\n            chart.addSeriesAsDrilldown(e.point, {\n              name: e.point.name,\n              data: data,\n              dataLabels: {\n                enabled: true,\n                format: '{point.name}'\n              }\n            });\n          });\n        }\n\n        this.setTitle(null, { text: e.point.name });\n      },\n      drillup: function () {\n        this.setTitle(null, { text: '' });\n      }\n    }\n  },\n\n  title: {\n    text: 'Highcharts Map Drilldown'\n  },\n\n  subtitle: {\n    text: '',\n    floating: true,\n    align: 'right',\n    y: 50,\n    style: {\n      fontSize: '16px'\n    }\n  },\n\n  colorAxis: {\n    min: 0,\n    minColor: '#E6E7E8',\n    maxColor: '#005645'\n  },\n\n  mapNavigation: {\n    enabled: true,\n    buttonOptions: {\n      verticalAlign: 'bottom'\n    }\n  },\n\n  plotOptions: {\n    map: {\n      states: {\n        hover: {\n          color: '#EEDD66'\n        }\n      }\n    }\n  },\n\n  series: [{\n    data: data,\n    name: 'USA',\n    dataLabels: {\n      enabled: true,\n      format: '{point.properties.postal-code}'\n    }\n  }, {\n    type: 'mapline',\n    data: separators,\n    color: 'silver',\n    enableMouseTracking: false,\n    animation: {\n      duration: 500\n    }\n  }],\n\n  drilldown: {\n    activeDataLabelStyle: {\n      color: '#FFFFFF',\n      textDecoration: 'none',\n      textOutline: '1px #000000'\n    },\n    drillUpButton: {\n      relativeTo: 'spacingBox',\n      position: {\n        x: 0,\n        y: 60\n      }\n    }\n  }\n});"
  },
  {
    "objectID": "index.html#example-import-from-observable-d3",
    "href": "index.html#example-import-from-observable-d3",
    "title": "a quarto.doc",
    "section": "example import from observable D3",
    "text": "example import from observable D3\n\nimport {pieChart, surveyCompareBars, surveyHistograms, longList, bigPercentage, bigPercentageWithDescription} from \"d/cf42a44ac2f24b7a\"\n\n\n\n\n\n\n\nroles = d3.tsvParse(`Role   dataRole    pct count\nHobbyist    support 30.6    174\nFront-end developer support 14.2    81\nAcademic or government researcher   support 14.2    81\nData analyst or business analyst    primary 9.65    55\nData scientist  primary 7.37    42\nData architect  primary 3.3 19\nStudent support 5.61    32\nEducator    support 5.09    29\nJournalist  support 2.98    17\nOther   support 6.32    39`, d3.autoType)\n\n\n\n\n\n\n\npieChart(roles, \"Role\", \"count\", \"dataRole\", \"Responses for data-centered roles\")"
  },
  {
    "objectID": "index.html#penguins-observable-d3",
    "href": "index.html#penguins-observable-d3",
    "title": "a quarto.doc",
    "section": "penguins & observable D3",
    "text": "penguins & observable D3\nA simple example based on Allison Horstâ€™s Palmer Penguins dataset.\nSource: quarto.org / rstudio / observablehq / jj et al\n\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotData\n\n\n\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n\n\n\n\n\n\n\n\n\nInputs.table(filtered)\n\n\n\n\n\n\n\n\n\n\nfiltered = transpose(data).filter(function(penguin) {\n  return bill_length_min < penguin.bill_length &&\n         islands.includes(penguin.island);\n})\n\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"a quarto.doc\"\nformat:\n  html:\n    toc: false\n    echo: false\n    message: false\n    warning: false\n    keep-hidden: true\n    code-tools: true\n---\n\n```{r,include = FALSE}\nojs_define(\n  data = readr::read_csv(\"https://raw.githubusercontent.com/quarto-dev/quarto-web/8159986c9ea1c956b9340663b2a4f03f3b75c9e2/docs/interactive/ojs/examples/palmer-penguins.csv\")\n  )\n```\n\n## example import from observable D3\n\n```{ojs}\nimport {pieChart, surveyCompareBars, surveyHistograms, longList, bigPercentage, bigPercentageWithDescription} from \"d/cf42a44ac2f24b7a\"\n\n```\n\n```{ojs}\nroles = d3.tsvParse(`Role   dataRole    pct count\nHobbyist    support 30.6    174\nFront-end developer support 14.2    81\nAcademic or government researcher   support 14.2    81\nData analyst or business analyst    primary 9.65    55\nData scientist  primary 7.37    42\nData architect  primary 3.3 19\nStudent support 5.61    32\nEducator    support 5.09    29\nJournalist  support 2.98    17\nOther   support 6.32    39`, d3.autoType)\n```\n\n\n```{ojs}\npieChart(roles, \"Role\", \"count\", \"dataRole\", \"Responses for data-centered roles\")\n```\n\n## that looks like js & html\n\n<div id=\"container\" style=\"height: 500px; min-width: 310px; max-width: 800px; margin: 0 auto\"></div>\n<script src=\"https://code.highcharts.com/maps/highmaps.js\"></script>\n<script src=\"https://code.highcharts.com/maps/modules/data.js\"></script>\n<script src=\"https://code.highcharts.com/maps/modules/drilldown.js\"></script>\n<script src=\"https://code.highcharts.com/maps/modules/exporting.js\"></script>\n<script src=\"https://code.highcharts.com/maps/modules/offline-exporting.js\"></script>\n<script src=\"https://code.highcharts.com/mapdata/countries/us/us-all.js\"></script>\n\n<link href=\"https://netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css\" rel=\"stylesheet\">\n\n\n```{js}\n/*\nTODO:\n- Check data labels after drilling. Label rank? New positions?\n*/\n\ndata = Highcharts.geojson(Highcharts.maps['countries/us/us-all']);\nconst separators = Highcharts.geojson(Highcharts.maps['countries/us/us-all'], 'mapline');\n\n// Set drilldown pointers\ndata.forEach((d, i) => {\n  d.drilldown = d.properties['hc-key'];\n  d.value = i; // Non-random bogus data\n});\n\nfunction getScript(url, cb) {\n  const script = document.createElement('script');\n  script.src = url;\n  script.onload = cb;\n  document.head.appendChild(script);\n}\n\n// Instantiate the map\nHighcharts.mapChart('container', {\n  chart: {\n    events: {\n      drilldown: function (e) {\n        if (!e.seriesOptions) {\n          const chart = this,\n            mapKey = 'countries/us/' + e.point.drilldown + '-all';\n\n          // Handle error, the timeout is cleared on success\n          let fail = setTimeout(() => {\n            if (!Highcharts.maps[mapKey]) {\n              chart.showLoading('<i class=\"icon-frown\"></i> Failed loading ' + e.point.name);\n              fail = setTimeout(() => {\n                chart.hideLoading();\n              }, 1000);\n            }\n          }, 3000);\n\n          // Show the spinner\n          chart.showLoading('<i class=\"icon-spinner icon-spin icon-3x\"></i>'); // Font Awesome spinner\n\n          // Load the drilldown map\n          getScript('https://code.highcharts.com/mapdata/' + mapKey + '.js', () => {\n            data = Highcharts.geojson(Highcharts.maps[mapKey]);\n\n            // Set a non-random bogus value\n            data.forEach((d, i) => {\n              d.value = i;\n            });\n\n            // Hide loading and add series\n            chart.hideLoading();\n            clearTimeout(fail);\n            chart.addSeriesAsDrilldown(e.point, {\n              name: e.point.name,\n              data: data,\n              dataLabels: {\n                enabled: true,\n                format: '{point.name}'\n              }\n            });\n          });\n        }\n\n        this.setTitle(null, { text: e.point.name });\n      },\n      drillup: function () {\n        this.setTitle(null, { text: '' });\n      }\n    }\n  },\n\n  title: {\n    text: 'Highcharts Map Drilldown'\n  },\n\n  subtitle: {\n    text: '',\n    floating: true,\n    align: 'right',\n    y: 50,\n    style: {\n      fontSize: '16px'\n    }\n  },\n\n  colorAxis: {\n    min: 0,\n    minColor: '#E6E7E8',\n    maxColor: '#005645'\n  },\n\n  mapNavigation: {\n    enabled: true,\n    buttonOptions: {\n      verticalAlign: 'bottom'\n    }\n  },\n\n  plotOptions: {\n    map: {\n      states: {\n        hover: {\n          color: '#EEDD66'\n        }\n      }\n    }\n  },\n\n  series: [{\n    data: data,\n    name: 'USA',\n    dataLabels: {\n      enabled: true,\n      format: '{point.properties.postal-code}'\n    }\n  }, {\n    type: 'mapline',\n    data: separators,\n    color: 'silver',\n    enableMouseTracking: false,\n    animation: {\n      duration: 500\n    }\n  }],\n\n  drilldown: {\n    activeDataLabelStyle: {\n      color: '#FFFFFF',\n      textDecoration: 'none',\n      textOutline: '1px #000000'\n    },\n    drillUpButton: {\n      relativeTo: 'spacingBox',\n      position: {\n        x: 0,\n        y: 60\n      }\n    }\n  }\n});\n\n```\n\n## & that looks like R code\n\n```r\nlibrary(leaflet)\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(lng=174.768, lat=-36.852, popup=\"The birthplace of R\")\n```\n\n## penguins & observable D3\n\n\nA simple example based on Allison Horst's [Palmer Penguins](https://allisonhorst.github.io/palmerpenguins/) dataset. \n\nSource: quarto.org / rstudio / observablehq / jj et al\n\n```ojs\n//| panel: input\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n```\n\n::: panel-tabset\n\n\n\n\n\n## Plot\n\n```ojs\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n```\n\n## Data\n\n```ojs\nInputs.table(filtered)\n```\n\n\n\n:::\n\n\n```ojs\nfiltered = transpose(data).filter(function(penguin) {\n  return bill_length_min < penguin.bill_length &&\n         islands.includes(penguin.island);\n})\n```"
  }
]