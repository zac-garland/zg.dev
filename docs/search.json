[
  {
    "objectID": "py.html",
    "href": "py.html",
    "title": "Python",
    "section": "",
    "text": "from ipyleaflet import Map, Marker, basemaps, basemap_to_tiles\nm = Map(\n  basemap=basemap_to_tiles(\n    basemaps.USGS.USImageryTopo, \"2020-09-31\"\n  ),\n  center=(39.712950, -105.406600),\n  zoom=15\n)\nm.add_layer(Marker(location=(39.712950, -105.406600)))\nm\n\n\n\n\n\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", \n                 color=\"species\", \n                 marginal_y=\"violin\", marginal_x=\"box\", template=\"plotly_dark\")\nfig.show()\n\n                                                \n\n\n\n\n\nSource Code\n---\ntitle: \"Python\"\nformat:\n  html:\n    toc: false\n    echo: false\n    message: false\n    warning: false\n    keep-hidden: true\n    code-tools: true\n---\n\n```{python}\nfrom ipyleaflet import Map, Marker, basemaps, basemap_to_tiles\nm = Map(\n  basemap=basemap_to_tiles(\n    basemaps.USGS.USImageryTopo, \"2020-09-31\"\n  ),\n  center=(39.712950, -105.406600),\n  zoom=15\n)\nm.add_layer(Marker(location=(39.712950, -105.406600)))\nm\n```\n\n\n\n```{python}\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", \n                 color=\"species\", \n                 marginal_y=\"violin\", marginal_x=\"box\", template=\"plotly_dark\")\nfig.show()\n```"
  },
  {
    "objectID": "rmd.html#section",
    "href": "rmd.html#section",
    "title": "Rmarkdown",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✓ ggplot2 3.3.5     ✓ purrr   0.3.4\n✓ tibble  3.1.6     ✓ dplyr   1.0.7\n✓ tidyr   1.1.4     ✓ stringr 1.4.0\n✓ readr   2.1.1     ✓ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\n\nlibrary(highcharter)\n\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\ndata <- tibble(\n  country =\n    c(\n      \"PT\", \"IE\", \"GB\", \"IS\",\n      \"NO\", \"SE\", \"DK\", \"DE\", \n      \"NL\", \"BE\", \"LU\", \"ES\", \n      \"FR\", \"PL\", \"CZ\", \"AT\",\n      \"CH\", \"LI\", \"SK\", \"HU\", \n      \"SI\", \"IT\", \"SM\", \"HR\", \n      \"BA\", \"YF\", \"ME\", \"AL\", \n      \"MK\", \"FI\", \"EE\", \"LV\", \n      \"LT\", \"BY\", \"UA\", \"MD\", \n      \"RO\", \"BG\", \"GR\", \"TR\", \n      \"CY\",\"RU\"\n    ),\n  tz = c(rep(\"UTC\", 4), rep(\"UTC + 1\", 25), rep(\"UCT + 2\", 12), \"UTC + 3\")\n)\n\n# auxiliar variable\ndata <- data %>%\n  mutate(value = cumsum(!duplicated(tz)))\n\n\n# now we'll create the dataClasses\ndta_clss <- data %>%\n  mutate(value = cumsum(!duplicated(tz))) %>%\n  group_by(tz) %>%\n  summarise(value = unique(value)) %>%\n  arrange(value) %>%\n  rename(name = tz, from = value) %>%\n  mutate(to = from + 1) %>%\n  list_parse()\n\nhcmap(\n  map = \"custom/europe\",\n  data = data,\n  joinBy = c(\"iso-a2\", \"country\"),\n  name = \"Time zone\",\n  value = \"value\",\n  tooltip = list(pointFormat = \"{point.name} {point.tz}\"),\n  dataLabels = list(enabled = TRUE, format = \"{point.country}\")\n) %>%\n  hc_colorAxis(\n    dataClassColor = \"category\",\n    dataClasses = dta_clss\n  ) %>%\n  hc_title(text = \"Europe Time Zones\")\n\n\n\n\n\nsource: https://jkunst.com/highcharter/articles/maps.html\n\n\n\nSource Code\n---\ntitle: \"Rmarkdown\"\nformat:\n  html:\n    toc: false\n    echo: false\n    message: false\n    warning: false\n    keep-hidden: true\n    code-tools: true\n---\n\n\n## \n\n```{r}\nlibrary(tidyverse)\nlibrary(highcharter)\n\n\n\ndata <- tibble(\n  country =\n    c(\n      \"PT\", \"IE\", \"GB\", \"IS\",\n      \"NO\", \"SE\", \"DK\", \"DE\", \n      \"NL\", \"BE\", \"LU\", \"ES\", \n      \"FR\", \"PL\", \"CZ\", \"AT\",\n      \"CH\", \"LI\", \"SK\", \"HU\", \n      \"SI\", \"IT\", \"SM\", \"HR\", \n      \"BA\", \"YF\", \"ME\", \"AL\", \n      \"MK\", \"FI\", \"EE\", \"LV\", \n      \"LT\", \"BY\", \"UA\", \"MD\", \n      \"RO\", \"BG\", \"GR\", \"TR\", \n      \"CY\",\"RU\"\n    ),\n  tz = c(rep(\"UTC\", 4), rep(\"UTC + 1\", 25), rep(\"UCT + 2\", 12), \"UTC + 3\")\n)\n\n# auxiliar variable\ndata <- data %>%\n  mutate(value = cumsum(!duplicated(tz)))\n\n\n# now we'll create the dataClasses\ndta_clss <- data %>%\n  mutate(value = cumsum(!duplicated(tz))) %>%\n  group_by(tz) %>%\n  summarise(value = unique(value)) %>%\n  arrange(value) %>%\n  rename(name = tz, from = value) %>%\n  mutate(to = from + 1) %>%\n  list_parse()\n\nhcmap(\n  map = \"custom/europe\",\n  data = data,\n  joinBy = c(\"iso-a2\", \"country\"),\n  name = \"Time zone\",\n  value = \"value\",\n  tooltip = list(pointFormat = \"{point.name} {point.tz}\"),\n  dataLabels = list(enabled = TRUE, format = \"{point.country}\")\n) %>%\n  hc_colorAxis(\n    dataClassColor = \"category\",\n    dataClasses = dta_clss\n  ) %>%\n  hc_title(text = \"Europe Time Zones\")\n```\n\nsource: <https://jkunst.com/highcharter/articles/maps.html>"
  },
  {
    "objectID": "js.html",
    "href": "js.html",
    "title": "JS",
    "section": "",
    "text": "ojs_define(\n  hello_world = \"hello world\"\n)\n\n\njavascript\nCLICK ON A STATE TO DRILLDOWN\n\n\n\n\n\n\n\n\n\n\n/*\nTODO:\n- Check data labels after drilling. Label rank? New positions?\n*/\n\n\n\ndata = Highcharts.geojson(Highcharts.maps['countries/us/us-all']);\nconst separators = Highcharts.geojson(Highcharts.maps['countries/us/us-all'], 'mapline');\n\n// Set drilldown pointers\ndata.forEach((d, i) => {\n  d.drilldown = d.properties['hc-key'];\n  d.value = i; // Non-random bogus data\n});\n\nfunction getScript(url, cb) {\n  const script = document.createElement('script');\n  script.src = url;\n  script.onload = cb;\n  document.head.appendChild(script);\n}\n\n// Instantiate the map\nHighcharts.mapChart('container', {\n  chart: {\n    events: {\n      drilldown: function (e) {\n        if (!e.seriesOptions) {\n          const chart = this,\n            mapKey = 'countries/us/' + e.point.drilldown + '-all';\n\n          // Handle error, the timeout is cleared on success\n          let fail = setTimeout(() => {\n            if (!Highcharts.maps[mapKey]) {\n              chart.showLoading('<i class=\"icon-frown\"></i> Failed loading ' + e.point.name);\n              fail = setTimeout(() => {\n                chart.hideLoading();\n              }, 1000);\n            }\n          }, 3000);\n\n          // Show the spinner\n          chart.showLoading('<i class=\"icon-spinner icon-spin icon-3x\"></i>'); // Font Awesome spinner\n\n          // Load the drilldown map\n          getScript('https://code.highcharts.com/mapdata/' + mapKey + '.js', () => {\n            data = Highcharts.geojson(Highcharts.maps[mapKey]);\n\n            // Set a non-random bogus value\n            data.forEach((d, i) => {\n              d.value = i;\n            });\n\n            // Hide loading and add series\n            chart.hideLoading();\n            clearTimeout(fail);\n            chart.addSeriesAsDrilldown(e.point, {\n              name: e.point.name,\n              data: data,\n              dataLabels: {\n                enabled: true,\n                format: '{point.name}'\n              }\n            });\n          });\n        }\n\n        this.setTitle(null, { text: e.point.name });\n      },\n      drillup: function () {\n        this.setTitle(null, { text: '' });\n      }\n    }\n  },\n\n  title: {\n    text: 'Highcharts Map Drilldown'\n  },\n\n  subtitle: {\n    text: '',\n    floating: true,\n    align: 'right',\n    y: 50,\n    style: {\n      fontSize: '16px'\n    }\n  },\n\n  colorAxis: {\n    min: 0,\n    minColor: '#E6E7E8',\n    maxColor: '#005645'\n  },\n\n  mapNavigation: {\n    enabled: true,\n    buttonOptions: {\n      verticalAlign: 'bottom'\n    }\n  },\n\n  plotOptions: {\n    map: {\n      states: {\n        hover: {\n          color: '#EEDD66'\n        }\n      }\n    }\n  },\n\n  series: [{\n    data: data,\n    name: 'USA',\n    dataLabels: {\n      enabled: true,\n      format: '{point.properties.postal-code}'\n    }\n  }, {\n    type: 'mapline',\n    data: separators,\n    color: 'silver',\n    enableMouseTracking: false,\n    animation: {\n      duration: 500\n    }\n  }],\n\n  drilldown: {\n    activeDataLabelStyle: {\n      color: '#FFFFFF',\n      textDecoration: 'none',\n      textOutline: '1px #000000'\n    },\n    drillUpButton: {\n      relativeTo: 'spacingBox',\n      position: {\n        x: 0,\n        y: 60\n      }\n    }\n  }\n});\n\n\nsource: https://www.highcharts.com/demo/maps/map-drilldown\n\n\n\nSource Code\n---\ntitle: \"JS\"\nformat:\n  html:\n    toc: false\n    echo: false\n    message: false\n    warning: false\n    keep-hidden: true\n    code-tools: true\n---\n\n```{r}\nojs_define(\n  hello_world = \"hello world\"\n)\n```\n\n\n# javascript\n\n*CLICK ON A STATE TO DRILLDOWN*\n\n<div id=\"container\" style=\"height: 500px; min-width: 310px; max-width: 800px; margin: 0 auto\"></div>\n<script src=\"https://code.highcharts.com/maps/highmaps.js\"></script>\n<script src=\"https://code.highcharts.com/maps/modules/data.js\"></script>\n<script src=\"https://code.highcharts.com/maps/modules/drilldown.js\"></script>\n<script src=\"https://code.highcharts.com/maps/modules/exporting.js\"></script>\n<script src=\"https://code.highcharts.com/maps/modules/offline-exporting.js\"></script>\n<script src=\"https://code.highcharts.com/mapdata/countries/us/us-all.js\"></script>\n\n\n\n```{js}\n/*\nTODO:\n- Check data labels after drilling. Label rank? New positions?\n*/\n\n\n\ndata = Highcharts.geojson(Highcharts.maps['countries/us/us-all']);\nconst separators = Highcharts.geojson(Highcharts.maps['countries/us/us-all'], 'mapline');\n\n// Set drilldown pointers\ndata.forEach((d, i) => {\n  d.drilldown = d.properties['hc-key'];\n  d.value = i; // Non-random bogus data\n});\n\nfunction getScript(url, cb) {\n  const script = document.createElement('script');\n  script.src = url;\n  script.onload = cb;\n  document.head.appendChild(script);\n}\n\n// Instantiate the map\nHighcharts.mapChart('container', {\n  chart: {\n    events: {\n      drilldown: function (e) {\n        if (!e.seriesOptions) {\n          const chart = this,\n            mapKey = 'countries/us/' + e.point.drilldown + '-all';\n\n          // Handle error, the timeout is cleared on success\n          let fail = setTimeout(() => {\n            if (!Highcharts.maps[mapKey]) {\n              chart.showLoading('<i class=\"icon-frown\"></i> Failed loading ' + e.point.name);\n              fail = setTimeout(() => {\n                chart.hideLoading();\n              }, 1000);\n            }\n          }, 3000);\n\n          // Show the spinner\n          chart.showLoading('<i class=\"icon-spinner icon-spin icon-3x\"></i>'); // Font Awesome spinner\n\n          // Load the drilldown map\n          getScript('https://code.highcharts.com/mapdata/' + mapKey + '.js', () => {\n            data = Highcharts.geojson(Highcharts.maps[mapKey]);\n\n            // Set a non-random bogus value\n            data.forEach((d, i) => {\n              d.value = i;\n            });\n\n            // Hide loading and add series\n            chart.hideLoading();\n            clearTimeout(fail);\n            chart.addSeriesAsDrilldown(e.point, {\n              name: e.point.name,\n              data: data,\n              dataLabels: {\n                enabled: true,\n                format: '{point.name}'\n              }\n            });\n          });\n        }\n\n        this.setTitle(null, { text: e.point.name });\n      },\n      drillup: function () {\n        this.setTitle(null, { text: '' });\n      }\n    }\n  },\n\n  title: {\n    text: 'Highcharts Map Drilldown'\n  },\n\n  subtitle: {\n    text: '',\n    floating: true,\n    align: 'right',\n    y: 50,\n    style: {\n      fontSize: '16px'\n    }\n  },\n\n  colorAxis: {\n    min: 0,\n    minColor: '#E6E7E8',\n    maxColor: '#005645'\n  },\n\n  mapNavigation: {\n    enabled: true,\n    buttonOptions: {\n      verticalAlign: 'bottom'\n    }\n  },\n\n  plotOptions: {\n    map: {\n      states: {\n        hover: {\n          color: '#EEDD66'\n        }\n      }\n    }\n  },\n\n  series: [{\n    data: data,\n    name: 'USA',\n    dataLabels: {\n      enabled: true,\n      format: '{point.properties.postal-code}'\n    }\n  }, {\n    type: 'mapline',\n    data: separators,\n    color: 'silver',\n    enableMouseTracking: false,\n    animation: {\n      duration: 500\n    }\n  }],\n\n  drilldown: {\n    activeDataLabelStyle: {\n      color: '#FFFFFF',\n      textDecoration: 'none',\n      textOutline: '1px #000000'\n    },\n    drillUpButton: {\n      relativeTo: 'spacingBox',\n      position: {\n        x: 0,\n        y: 60\n      }\n    }\n  }\n});\n\n```\n\nsource: <https://www.highcharts.com/demo/maps/map-drilldown>"
  },
  {
    "objectID": "shiny.html",
    "href": "shiny.html",
    "title": "Shiny",
    "section": "",
    "text": "shiny::HTML('\n<iframe id=\"example1\" src=\"https://zac-garland.shinyapps.io/world-dev-indicators/\" style=\"border: none; width: 100%; height: 720px\" frameborder=\"0\"></iframe>\n')\n\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"Shiny\"\nformat:\n  html:\n    toc: false\n    echo: false\n    message: false\n    warning: false\n    keep-hidden: true\n    code-tools: true\n---\n\n```{r}\n#| column: screen\nshiny::HTML('\n<iframe id=\"example1\" src=\"https://zac-garland.shinyapps.io/world-dev-indicators/\" style=\"border: none; width: 100%; height: 720px\" frameborder=\"0\"></iframe>\n')\n\n\n```"
  },
  {
    "objectID": "index.html#based-on-rmarkdown-language-agnostic",
    "href": "index.html#based-on-rmarkdown-language-agnostic",
    "title": "Quarto",
    "section": "Based on Rmarkdown & language agnostic",
    "text": "Based on Rmarkdown & language agnostic\n\nlongList = function(tools, description) {\n  const categories = [...new Set(tools.map(tool => tool.category))].map(id => ({id, label: id}))\n  return html`\n  <div>\n  <div class=\"tools-container\">\n    <div class=\"sidebar\">\n      <div class=\"big-number\"><b>${tools.length}</b> ${description}</div>\n    </div>\n    <div class=\"tools\">\n    ${tools.sort().map(tool => html`<span class=\"tool category-${tool.category}\">${tool.tool}</span>`)}\n    </div>\n</div>\n  `\n}\n\n\n\n\nlongList(transpose(tools), \"languages / engines supported in Rmarkdown\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"Quarto\"\nformat:\n  html:\n    toc: false\n    echo: false\n    message: false\n    warning: false\n    keep-hidden: true\n    code-tools: true\n---\n\n```{r,include = FALSE}\nlibrary(tidyverse)\n\ntool_pref <- c(\n  \"R\", \"python\", \"bash\",\"sql\", \"julia\",\n  \"js\", \"node\",\"coffee\", \"sass\", \"ojs\",\n  \"c\",\"fortran\",\"Rcpp\",\"go\",\"perl\"\n)\n\ncategories <- c(\"Analytics\",\"Business\",\"Collaboration\",\"Communication\",\"Data\",\"Design\",\"Developer\",\"Other\")\n\ntool_dat <- names(knitr::knit_engines$get()) %>%\n  tibble(tool = .) %>%\n  mutate(category = sample(categories, nrow(.), replace = TRUE)) %>% \n  select(category,tool) %>% \n  arrange(match(tool,c(tool_pref,base::setdiff(names(knitr::knit_engines$get()),tool_pref))))\n\nojs_define(\n  tools = tool_dat\n  )\n```\n\n\n```{css}\n.tools-container {\n  display: flex;\n  align-items: flex-start;\n  gap: 20px;\n  padding: 30px 0 20px 0;\n}\n.tools-container .sidebar {\n  width: 110px;\n  flex: 1 0 auto;\n}\n@media only screen and (min-width: 600px) {\n  .tools-container .sidebar {\n    width: 160px;\n  }\n}\n.tools-container .big-number {\n  line-height: 1.5em;\n}\n.tools-container .big-number b {\n  display: block;\n  font-size: 48px;\n  line-height: 48px;\n  margin-bottom: 4px;\n}\n.tools-container .color-key {\n  border-top: solid 1px rgba(0, 0, 0, 0.08);\n  margin-top: 20px;\n  padding-top: 20px;\n  width: 100%\n}\n.tools-container .color {\n  color: #666;\n  display: flex;\n  gap: 8px;\n  margin-top: 2px;\n  display: flex;\n  align-items: center;\n}\n.tools-container .swatch {\n  width: 12px;\n  height: 12px;\n  border-radius: 4px;\n}\n.tools-container .tools {\n  display: flex;\n  gap: 4px;\n  flex-wrap: wrap;\n}\n.tools-container .tool {\n  border-radius: 4px;\n  padding: 2px 4px;\n  font-size: 1.7em;\n  color: #000000;\n}\n.tools-container .category-Analytics {\n  background-color: MistyRose;\n}\n.tools-container .category-Business {\n  background-color: SeaShell;\n}\n.tools-container .category-Collaboration {\n  background-color: PapayaWhip;\n}\n.tools-container .category-Communication {\n  background-color: Beige;\n}\n.tools-container .category-Data {\n  background-color: hsl(157deg 47% 93%);\n}\n.tools-container .category-Design {\n  background-color: AliceBlue;\n}\n.tools-container .category-Developer {\n  background-color: Lavender;\n}\n.tools-container .category-Other {\n  background-color: WhiteSmoke;\n}\n\n```\n\n\n\n\n## Based on Rmarkdown & language agnostic\n\n```ojs\nlongList = function(tools, description) {\n  const categories = [...new Set(tools.map(tool => tool.category))].map(id => ({id, label: id}))\n  return html`\n  <div>\n  <div class=\"tools-container\">\n    <div class=\"sidebar\">\n      <div class=\"big-number\"><b>${tools.length}</b> ${description}</div>\n    </div>\n    <div class=\"tools\">\n    ${tools.sort().map(tool => html`<span class=\"tool category-${tool.category}\">${tool.tool}</span>`)}\n    </div>\n</div>\n  `\n}\n\n\n\n\nlongList(transpose(tools), \"languages / engines supported in Rmarkdown\")\n\n\n```"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This was my test run of https://quarto.org/\nI was like: 🤯🤓\nThank you to all who worked on the underlying engine. Thank you RStudio.\nIt’s awesome."
  },
  {
    "objectID": "obs.html#data-practitioners-data-specialists-and-their-collaborators",
    "href": "obs.html#data-practitioners-data-specialists-and-their-collaborators",
    "title": "Observable D3",
    "section": "Data Practitioners: data specialists and their collaborators",
    "text": "Data Practitioners: data specialists and their collaborators\n\nimport {pieChart} from \"d/cf42a44ac2f24b7a\"\n\n\n\n\n\n\n\nroles = d3.tsvParse(`Role   dataRole    pct count\nHobbyist    support 30.6    174\nFront-end developer support 14.2    81\nAcademic or government researcher   support 14.2    81\nData analyst or business analyst    primary 9.65    55\nData scientist  primary 7.37    42\nData architect  primary 3.3 19\nStudent support 5.61    32\nEducator    support 5.09    29\nJournalist  support 2.98    17\nOther   support 6.32    39`, d3.autoType)\n\n\n\n\n\n\n\npieChart(roles, \"Role\", \"count\", \"dataRole\", \"Responses for data-centered roles\")\n\n\n\n\n\n\n\nimport {ToolsImage} from \"@observablehq/state-of-dataviz-2021\"\n\n\nToolsImage\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource: https://observablehq.com/@observablehq/state-of-dataviz-2021"
  },
  {
    "objectID": "obs.html#observable-inputs-based-on-r-data",
    "href": "obs.html#observable-inputs-based-on-r-data",
    "title": "Observable D3",
    "section": "observable inputs based on R data",
    "text": "observable inputs based on R data\n\nojs_define(\n  data = readr::read_csv(\"https://raw.githubusercontent.com/quarto-dev/quarto-web/8159986c9ea1c956b9340663b2a4f03f3b75c9e2/docs/interactive/ojs/examples/palmer-penguins.csv\")\n  )\n\nRows: 344 Columns: 7\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): species, island, sex\ndbl (4): bill_length, bill_depth, flipper_length, body_mass\n\n\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotData\n\n\n\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n\n\n\n\n\n\n\n\n\nInputs.table(filtered)\n\n\n\n\n\n\n\n\n\n\nfiltered = transpose(data).filter(function(penguin) {\n  return bill_length_min < penguin.bill_length &&\n         islands.includes(penguin.island);\n})\n\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"Observable D3\"\nformat:\n  html:\n    toc: false\n    echo: false\n    message: false\n    warning: false\n    keep-hidden: true\n    code-tools: true\n---\n\n\n```{css}\n.tools-container .tool {\n  color: #000000 !important;\n}\n\n.response > * {\n    color: var(--bs-body-color) !important;\n}\n\nsvg {\n  color: #000000\n}\n\n.legend > * {\n    color: var(--bs-body-color) !important;\n}\n```\n\n\n## Data Practitioners: data specialists and their collaborators\n\n```ojs\nimport {pieChart} from \"d/cf42a44ac2f24b7a\"\n\n```\n\n\n```ojs\nroles = d3.tsvParse(`Role   dataRole    pct count\nHobbyist    support 30.6    174\nFront-end developer support 14.2    81\nAcademic or government researcher   support 14.2    81\nData analyst or business analyst    primary 9.65    55\nData scientist  primary 7.37    42\nData architect  primary 3.3 19\nStudent support 5.61    32\nEducator    support 5.09    29\nJournalist  support 2.98    17\nOther   support 6.32    39`, d3.autoType)\n```\n\n\n```ojs\npieChart(roles, \"Role\", \"count\", \"dataRole\", \"Responses for data-centered roles\")\n```\n\n```ojs\nimport {ToolsImage} from \"@observablehq/state-of-dataviz-2021\"\n\n\nToolsImage\n```\n\n\n\nSource: <https://observablehq.com/@observablehq/state-of-dataviz-2021>\n\n\n## observable inputs based on R data\n\n```{r}\nojs_define(\n  data = readr::read_csv(\"https://raw.githubusercontent.com/quarto-dev/quarto-web/8159986c9ea1c956b9340663b2a4f03f3b75c9e2/docs/interactive/ojs/examples/palmer-penguins.csv\")\n  )\n```\n\n```ojs\n//| panel: input\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n```\n\n::: panel-tabset\n\n\n\n\n\n## Plot\n\n```ojs\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n```\n\n## Data\n\n```ojs\nInputs.table(filtered)\n```\n\n\n\n:::\n\n\n```ojs\nfiltered = transpose(data).filter(function(penguin) {\n  return bill_length_min < penguin.bill_length &&\n         islands.includes(penguin.island);\n})\n```"
  }
]