[
  {
    "objectID": "py.html",
    "href": "py.html",
    "title": "python widgets",
    "section": "",
    "text": "from ipyleaflet import Map, Marker, basemaps, basemap_to_tiles\nm = Map(\n  basemap=basemap_to_tiles(\n    basemaps.USGS.USImageryTopo, \"2020-09-31\"\n  ),\n  center=(39.712950, -105.406600),\n  zoom=15\n)\nm.add_layer(Marker(location=(39.712950, -105.406600)))\nm\n\n\n\n\n\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", \n                 color=\"species\", \n                 marginal_y=\"violin\", marginal_x=\"box\", template=\"plotly_dark\")\nfig.show()"
  },
  {
    "objectID": "js.html#javascript",
    "href": "js.html#javascript",
    "title": "Observable D3",
    "section": "javascript",
    "text": "javascript\nCLICK ON A STATE TO DRILLDOWN\n\n\n\n\n\n\n\n\n\n\n/*\nTODO:\n- Check data labels after drilling. Label rank? New positions?\n*/\n\n\n\ndata = Highcharts.geojson(Highcharts.maps['countries/us/us-all']);\nconst separators = Highcharts.geojson(Highcharts.maps['countries/us/us-all'], 'mapline');\n\n// Set drilldown pointers\ndata.forEach((d, i) => {\n  d.drilldown = d.properties['hc-key'];\n  d.value = i; // Non-random bogus data\n});\n\nfunction getScript(url, cb) {\n  const script = document.createElement('script');\n  script.src = url;\n  script.onload = cb;\n  document.head.appendChild(script);\n}\n\n// Instantiate the map\nHighcharts.mapChart('container', {\n  chart: {\n    events: {\n      drilldown: function (e) {\n        if (!e.seriesOptions) {\n          const chart = this,\n            mapKey = 'countries/us/' + e.point.drilldown + '-all';\n\n          // Handle error, the timeout is cleared on success\n          let fail = setTimeout(() => {\n            if (!Highcharts.maps[mapKey]) {\n              chart.showLoading('<i class=\"icon-frown\"></i> Failed loading ' + e.point.name);\n              fail = setTimeout(() => {\n                chart.hideLoading();\n              }, 1000);\n            }\n          }, 3000);\n\n          // Show the spinner\n          chart.showLoading('<i class=\"icon-spinner icon-spin icon-3x\"></i>'); // Font Awesome spinner\n\n          // Load the drilldown map\n          getScript('https://code.highcharts.com/mapdata/' + mapKey + '.js', () => {\n            data = Highcharts.geojson(Highcharts.maps[mapKey]);\n\n            // Set a non-random bogus value\n            data.forEach((d, i) => {\n              d.value = i;\n            });\n\n            // Hide loading and add series\n            chart.hideLoading();\n            clearTimeout(fail);\n            chart.addSeriesAsDrilldown(e.point, {\n              name: e.point.name,\n              data: data,\n              dataLabels: {\n                enabled: true,\n                format: '{point.name}'\n              }\n            });\n          });\n        }\n\n        this.setTitle(null, { text: e.point.name });\n      },\n      drillup: function () {\n        this.setTitle(null, { text: '' });\n      }\n    }\n  },\n\n  title: {\n    text: 'Highcharts Map Drilldown'\n  },\n\n  subtitle: {\n    text: '',\n    floating: true,\n    align: 'right',\n    y: 50,\n    style: {\n      fontSize: '16px'\n    }\n  },\n\n  colorAxis: {\n    min: 0,\n    minColor: '#E6E7E8',\n    maxColor: '#005645'\n  },\n\n  mapNavigation: {\n    enabled: true,\n    buttonOptions: {\n      verticalAlign: 'bottom'\n    }\n  },\n\n  plotOptions: {\n    map: {\n      states: {\n        hover: {\n          color: '#EEDD66'\n        }\n      }\n    }\n  },\n\n  series: [{\n    data: data,\n    name: 'USA',\n    dataLabels: {\n      enabled: true,\n      format: '{point.properties.postal-code}'\n    }\n  }, {\n    type: 'mapline',\n    data: separators,\n    color: 'silver',\n    enableMouseTracking: false,\n    animation: {\n      duration: 500\n    }\n  }],\n\n  drilldown: {\n    activeDataLabelStyle: {\n      color: '#FFFFFF',\n      textDecoration: 'none',\n      textOutline: '1px #000000'\n    },\n    drillUpButton: {\n      relativeTo: 'spacingBox',\n      position: {\n        x: 0,\n        y: 60\n      }\n    }\n  }\n});\n\nsource: https://www.highcharts.com/demo/maps/map-drilldown"
  },
  {
    "objectID": "index.html#an-overwhelming-number-of-tools",
    "href": "index.html#an-overwhelming-number-of-tools",
    "title": "rmarkdown",
    "section": "An overwhelming number of tools",
    "text": "An overwhelming number of tools\n\nlongList = function(tools, description) {\n  const categories = [...new Set(tools.map(tool => tool.category))].map(id => ({id, label: id}))\n  return html`\n  <div>\n  <style>\n    .tools-container {\n      font-family: sans-serif;\n      font-size: 12px;\n      display: flex;\n      align-items: flex-start;\n      gap: 20px;\n      padding: 30px 0 20px 0;\n    }\n    .tools-container .sidebar {\n      width: 110px;\n      flex: 1 0 auto;\n    }\n    @media only screen and (min-width: 600px) {\n      .tools-container .sidebar {\n        width: 160px;\n      }\n    }\n    .tools-container .big-number {\n      font-family: \"Source Serif Pro\";\n      font-size: 16px;\n      line-height: 1.5em;\n    }\n    .tools-container .big-number b {\n      display: block;\n      font-size: 48px;\n      line-height: 48px;\n      margin-bottom: 4px;\n    }\n    .tools-container .color-key {\n      border-top: solid 1px rgba(0, 0, 0, 0.08);\n      margin-top: 20px;\n      padding-top: 20px;\n      width: 100%\n    }\n    .tools-container .color {\n      color: #666;\n      display: flex;\n      gap: 8px;\n      margin-top: 2px;\n      display: flex;\n      align-items: center;\n    }\n    .tools-container .swatch {\n      width: 12px;\n      height: 12px;\n      border-radius: 4px;\n    }\n    .tools-container .tools {\n      display: flex;\n      gap: 4px;\n      flex-wrap: wrap;\n    }\n    .tools-container .tool {\n      border-radius: 4px;\n      padding: 2px 4px;\n    }\n    .tools-container .category-Analytics {\n      background-color: MistyRose;\n    }\n    .tools-container .category-Business {\n      background-color: SeaShell;\n    }\n    .tools-container .category-Collaboration {\n      background-color: PapayaWhip;\n    }\n    .tools-container .category-Communication {\n      background-color: Beige;\n    }\n    .tools-container .category-Data {\n      background-color: hsl(157deg 47% 93%);\n    }\n    .tools-container .category-Design {\n      background-color: AliceBlue;\n    }\n    .tools-container .category-Developer {\n      background-color: Lavender;\n    }\n    .tools-container .category-Other {\n      background-color: WhiteSmoke;\n    }\n  </style>\n  <div class=\"tools-container\">\n    <div class=\"sidebar\">\n      <div class=\"big-number\"><b>${tools.length}</b> ${description}</div>\n      <div class=\"color-key\">\n        <div>\n          ${categories.sort((a, b) => d3.ascending(a.label, b.label)).map(category => html`<div class=\"color\">\n            <div class=\"swatch category-${category.id}\"></div> ${category.label}\n          </div>`)}\n          </div>\n      </div>\n    </div>\n    <div class=\"tools\">\n    ${tools.sort().map(tool => html`<span class=\"tool category-${tool.category}\">${tool.tool}</span>`)}\n    </div>\n</div>\n  `\n}\n\n\n\n\nlongList(transpose(tools), \"languages / engines supported in Rmarkdown\")"
  },
  {
    "objectID": "index.html#section",
    "href": "index.html#section",
    "title": "rmarkdown",
    "section": "",
    "text": "library(highcharter)\n\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\ndata <- tibble(\n  country =\n    c(\n      \"PT\", \"IE\", \"GB\", \"IS\",\n      \"NO\", \"SE\", \"DK\", \"DE\", \"NL\", \"BE\", \"LU\", \"ES\", \"FR\", \"PL\", \"CZ\", \"AT\",\n      \"CH\", \"LI\", \"SK\", \"HU\", \"SI\", \"IT\", \"SM\", \"HR\", \"BA\", \"YF\", \"ME\", \"AL\", \"MK\",\n      \"FI\", \"EE\", \"LV\", \"LT\", \"BY\", \"UA\", \"MD\", \"RO\", \"BG\", \"GR\", \"TR\", \"CY\",\n      \"RU\"\n    ),\n  tz = c(rep(\"UTC\", 4), rep(\"UTC + 1\", 25), rep(\"UCT + 2\", 12), \"UTC + 3\")\n)\n\n# auxiliar variable\ndata <- data %>%\n  mutate(value = cumsum(!duplicated(tz)))\n\n\n# now we'll create the dataClasses\ndta_clss <- data %>%\n  mutate(value = cumsum(!duplicated(tz))) %>%\n  group_by(tz) %>%\n  summarise(value = unique(value)) %>%\n  arrange(value) %>%\n  rename(name = tz, from = value) %>%\n  mutate(to = from + 1) %>%\n  list_parse()\n\nhcmap(\n  map = \"custom/europe\",\n  data = data,\n  joinBy = c(\"iso-a2\", \"country\"),\n  name = \"Time zone\",\n  value = \"value\",\n  tooltip = list(pointFormat = \"{point.name} {point.tz}\"),\n  dataLabels = list(enabled = TRUE, format = \"{point.country}\")\n) %>%\n  hc_colorAxis(\n    dataClassColor = \"category\",\n    dataClasses = dta_clss\n  ) %>%\n  hc_title(text = \"Europe Time Zones\")\n\n\n\n\n\nsource: https://jkunst.com/highcharter/articles/maps.html"
  },
  {
    "objectID": "index.html#that-looks-like-observablejs-inputs",
    "href": "index.html#that-looks-like-observablejs-inputs",
    "title": "rmarkdown",
    "section": "& that looks like observableJS inputs",
    "text": "& that looks like observableJS inputs\nA simple example based on Allison Horstâ€™s Palmer Penguins dataset.\nSource: https://quarto.org/docs/gallery/\n\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotData\n\n\n\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n\n\n\n\n\n\n\n\n\nInputs.table(filtered)\n\n\n\n\n\n\n\n\n\n\nfiltered = transpose(data).filter(function(penguin) {\n  return bill_length_min < penguin.bill_length &&\n         islands.includes(penguin.island);\n})\n\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"rmarkdown\"\nformat:\n  html:\n    toc: false\n    echo: false\n    message: false\n    warning: false\n    keep-hidden: true\n    code-tools: true\n---\n\n```{r,include = FALSE}\nlibrary(tidyverse)\n\ntool_pref <- c(\n  \"R\", \"python\", \"bash\",\"sql\", \"julia\",\n  \"js\", \"node\",\"coffee\", \"sass\", \"ojs\",\n  \"c\",\"fortran\",\"Rcpp\",\"go\",\"perl\"\n)\n\ncategories <- c(\"Analytics\",\"Business\",\"Collaboration\",\"Communication\",\"Data\",\"Design\",\"Developer\",\"Other\")\n\ntool_dat <- names(knitr::knit_engines$get()) %>%\n  tibble(tool = .) %>%\n  mutate(category = sample(categories, nrow(.), replace = TRUE)) %>% \n  select(category,tool) %>% \n  arrange(match(tool,c(tool_pref,base::setdiff(names(knitr::knit_engines$get()),tool_pref))))\n\nojs_define(\n  data = readr::read_csv(\"https://raw.githubusercontent.com/quarto-dev/quarto-web/8159986c9ea1c956b9340663b2a4f03f3b75c9e2/docs/interactive/ojs/examples/palmer-penguins.csv\"),\n  tools = tool_dat\n  )\n```\n\n\n\n\n## Based on Rmarkdown & language agnostic\n\n```{ojs}\nlongList = function(tools, description) {\n  const categories = [...new Set(tools.map(tool => tool.category))].map(id => ({id, label: id}))\n  return html`\n  <div>\n  <style>\n    .tools-container {\n      display: flex;\n      align-items: flex-start;\n      gap: 20px;\n      padding: 30px 0 20px 0;\n    }\n    .tools-container .sidebar {\n      width: 110px;\n      flex: 1 0 auto;\n    }\n    @media only screen and (min-width: 600px) {\n      .tools-container .sidebar {\n        width: 160px;\n      }\n    }\n    .tools-container .big-number {\n      line-height: 1.5em;\n    }\n    .tools-container .big-number b {\n      display: block;\n      font-size: 48px;\n      line-height: 48px;\n      margin-bottom: 4px;\n    }\n    .tools-container .color-key {\n      border-top: solid 1px rgba(0, 0, 0, 0.08);\n      margin-top: 20px;\n      padding-top: 20px;\n      width: 100%\n    }\n    .tools-container .color {\n      color: #666;\n      display: flex;\n      gap: 8px;\n      margin-top: 2px;\n      display: flex;\n      align-items: center;\n    }\n    .tools-container .swatch {\n      width: 12px;\n      height: 12px;\n      border-radius: 4px;\n    }\n    .tools-container .tools {\n      display: flex;\n      gap: 4px;\n      flex-wrap: wrap;\n    }\n    .tools-container .tool {\n      border-radius: 4px;\n      padding: 2px 4px;\n      font-size: 1.7em\n    }\n    .tools-container .category-Analytics {\n      background-color: MistyRose;\n    }\n    .tools-container .category-Business {\n      background-color: SeaShell;\n    }\n    .tools-container .category-Collaboration {\n      background-color: PapayaWhip;\n    }\n    .tools-container .category-Communication {\n      background-color: Beige;\n    }\n    .tools-container .category-Data {\n      background-color: hsl(157deg 47% 93%);\n    }\n    .tools-container .category-Design {\n      background-color: AliceBlue;\n    }\n    .tools-container .category-Developer {\n      background-color: Lavender;\n    }\n    .tools-container .category-Other {\n      background-color: WhiteSmoke;\n    }\n  </style>\n  <div class=\"tools-container\">\n    <div class=\"sidebar\">\n      <div class=\"big-number\"><b>${tools.length}</b> ${description}</div>\n      <div class=\"color-key\">\n        <div>\n          ${categories.sort((a, b) => d3.ascending(a.label, b.label)).map(category => html`<div class=\"color\">\n            <div class=\"swatch category-${category.id}\"></div> ${category.label}\n          </div>`)}\n          </div>\n      </div>\n    </div>\n    <div class=\"tools\">\n    ${tools.sort().map(tool => html`<span class=\"tool category-${tool.category}\">${tool.tool}</span>`)}\n    </div>\n</div>\n  `\n}\n\n\n\n\nlongList(transpose(tools), \"languages / engines supported in Rmarkdown\")\n\n\n```\n\n\n\n\n\n## \n\n```{r}\nlibrary(highcharter)\n\ndata <- tibble(\n  country =\n    c(\n      \"PT\", \"IE\", \"GB\", \"IS\",\n      \"NO\", \"SE\", \"DK\", \"DE\", \"NL\", \"BE\", \"LU\", \"ES\", \"FR\", \"PL\", \"CZ\", \"AT\",\n      \"CH\", \"LI\", \"SK\", \"HU\", \"SI\", \"IT\", \"SM\", \"HR\", \"BA\", \"YF\", \"ME\", \"AL\", \"MK\",\n      \"FI\", \"EE\", \"LV\", \"LT\", \"BY\", \"UA\", \"MD\", \"RO\", \"BG\", \"GR\", \"TR\", \"CY\",\n      \"RU\"\n    ),\n  tz = c(rep(\"UTC\", 4), rep(\"UTC + 1\", 25), rep(\"UCT + 2\", 12), \"UTC + 3\")\n)\n\n# auxiliar variable\ndata <- data %>%\n  mutate(value = cumsum(!duplicated(tz)))\n\n\n# now we'll create the dataClasses\ndta_clss <- data %>%\n  mutate(value = cumsum(!duplicated(tz))) %>%\n  group_by(tz) %>%\n  summarise(value = unique(value)) %>%\n  arrange(value) %>%\n  rename(name = tz, from = value) %>%\n  mutate(to = from + 1) %>%\n  list_parse()\n\nhcmap(\n  map = \"custom/europe\",\n  data = data,\n  joinBy = c(\"iso-a2\", \"country\"),\n  name = \"Time zone\",\n  value = \"value\",\n  tooltip = list(pointFormat = \"{point.name} {point.tz}\"),\n  dataLabels = list(enabled = TRUE, format = \"{point.country}\")\n) %>%\n  hc_colorAxis(\n    dataClassColor = \"category\",\n    dataClasses = dta_clss\n  ) %>%\n  hc_title(text = \"Europe Time Zones\")\n```\n\nsource: <https://jkunst.com/highcharter/articles/maps.html>\n\n\n\n\n\n## & that looks like observableJS inputs\n\n\nA simple example based on Allison Horst's [Palmer Penguins](https://allisonhorst.github.io/palmerpenguins/) dataset. \n\nSource: <https://quarto.org/docs/gallery/>\n\n```{ojs}\n//| panel: input\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n```\n\n::: panel-tabset\n\n\n\n\n\n## Plot\n\n```{ojs}\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n```\n\n## Data\n\n```{ojs}\nInputs.table(filtered)\n```\n\n\n\n:::\n\n\n```{ojs}\nfiltered = transpose(data).filter(function(penguin) {\n  return bill_length_min < penguin.bill_length &&\n         islands.includes(penguin.island);\n})\n```"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This was my test run of https://quarto.org/\nI was like: ðŸ¤¯ðŸ¤“\nThank you to all who worked on the underlying engine. Thank you RStudio.\nItâ€™s awesome."
  },
  {
    "objectID": "obs.html#import-from-observable-d3",
    "href": "obs.html#import-from-observable-d3",
    "title": "Observable D3",
    "section": "import from observable D3",
    "text": "import from observable D3\n\nData Practitioners: data specialists and their collaborators\n\nimport {pieChart} from \"d/cf42a44ac2f24b7a\"\n\n\n\n\n\n\n\nroles = d3.tsvParse(`Role   dataRole    pct count\nHobbyist    support 30.6    174\nFront-end developer support 14.2    81\nAcademic or government researcher   support 14.2    81\nData analyst or business analyst    primary 9.65    55\nData scientist  primary 7.37    42\nData architect  primary 3.3 19\nStudent support 5.61    32\nEducator    support 5.09    29\nJournalist  support 2.98    17\nOther   support 6.32    39`, d3.autoType)\n\n\n\n\n\n\n\npieChart(roles, \"Role\", \"count\", \"dataRole\", \"Responses for data-centered roles\")\n\n\n\n\n\n\n\nimport {ToolsImage} from \"@observablehq/state-of-dataviz-2021\"\n\n\nToolsImage\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource: https://observablehq.com/@observablehq/state-of-dataviz-2021"
  },
  {
    "objectID": "index.html#rmarkdown-is-language-agnostic",
    "href": "index.html#rmarkdown-is-language-agnostic",
    "title": "rmarkdown",
    "section": "Rmarkdown is language agnostic",
    "text": "Rmarkdown is language agnostic\n\nlongList = function(tools, description) {\n  const categories = [...new Set(tools.map(tool => tool.category))].map(id => ({id, label: id}))\n  return html`\n  <div>\n  <style>\n    .tools-container {\n      display: flex;\n      align-items: flex-start;\n      gap: 20px;\n      padding: 30px 0 20px 0;\n    }\n    .tools-container .sidebar {\n      width: 110px;\n      flex: 1 0 auto;\n    }\n    @media only screen and (min-width: 600px) {\n      .tools-container .sidebar {\n        width: 160px;\n      }\n    }\n    .tools-container .big-number {\n      line-height: 1.5em;\n    }\n    .tools-container .big-number b {\n      display: block;\n      font-size: 48px;\n      line-height: 48px;\n      margin-bottom: 4px;\n    }\n    .tools-container .color-key {\n      border-top: solid 1px rgba(0, 0, 0, 0.08);\n      margin-top: 20px;\n      padding-top: 20px;\n      width: 100%\n    }\n    .tools-container .color {\n      color: #666;\n      display: flex;\n      gap: 8px;\n      margin-top: 2px;\n      display: flex;\n      align-items: center;\n    }\n    .tools-container .swatch {\n      width: 12px;\n      height: 12px;\n      border-radius: 4px;\n    }\n    .tools-container .tools {\n      display: flex;\n      gap: 4px;\n      flex-wrap: wrap;\n    }\n    .tools-container .tool {\n      border-radius: 4px;\n      padding: 2px 4px;\n      font-size: 1.7em\n    }\n    .tools-container .category-Analytics {\n      background-color: MistyRose;\n    }\n    .tools-container .category-Business {\n      background-color: SeaShell;\n    }\n    .tools-container .category-Collaboration {\n      background-color: PapayaWhip;\n    }\n    .tools-container .category-Communication {\n      background-color: Beige;\n    }\n    .tools-container .category-Data {\n      background-color: hsl(157deg 47% 93%);\n    }\n    .tools-container .category-Design {\n      background-color: AliceBlue;\n    }\n    .tools-container .category-Developer {\n      background-color: Lavender;\n    }\n    .tools-container .category-Other {\n      background-color: WhiteSmoke;\n    }\n  </style>\n  <div class=\"tools-container\">\n    <div class=\"sidebar\">\n      <div class=\"big-number\"><b>${tools.length}</b> ${description}</div>\n      <div class=\"color-key\">\n        <div>\n          ${categories.sort((a, b) => d3.ascending(a.label, b.label)).map(category => html`<div class=\"color\">\n            <div class=\"swatch category-${category.id}\"></div> ${category.label}\n          </div>`)}\n          </div>\n      </div>\n    </div>\n    <div class=\"tools\">\n    ${tools.sort().map(tool => html`<span class=\"tool category-${tool.category}\">${tool.tool}</span>`)}\n    </div>\n</div>\n  `\n}\n\n\n\n\nlongList(transpose(tools), \"languages / engines supported in Rmarkdown\")"
  },
  {
    "objectID": "index.html#based-on-rmarkdown-language-agnostic",
    "href": "index.html#based-on-rmarkdown-language-agnostic",
    "title": "Quarto",
    "section": "Based on Rmarkdown & language agnostic",
    "text": "Based on Rmarkdown & language agnostic\n\nlongList = function(tools, description) {\n  const categories = [...new Set(tools.map(tool => tool.category))].map(id => ({id, label: id}))\n  return html`\n  <div>\n  <style>\n    .tools-container {\n      display: flex;\n      align-items: flex-start;\n      gap: 20px;\n      padding: 30px 0 20px 0;\n    }\n    .tools-container .sidebar {\n      width: 110px;\n      flex: 1 0 auto;\n    }\n    @media only screen and (min-width: 600px) {\n      .tools-container .sidebar {\n        width: 160px;\n      }\n    }\n    .tools-container .big-number {\n      line-height: 1.5em;\n    }\n    .tools-container .big-number b {\n      display: block;\n      font-size: 48px;\n      line-height: 48px;\n      margin-bottom: 4px;\n    }\n    .tools-container .color-key {\n      border-top: solid 1px rgba(0, 0, 0, 0.08);\n      margin-top: 20px;\n      padding-top: 20px;\n      width: 100%\n    }\n    .tools-container .color {\n      color: #666;\n      display: flex;\n      gap: 8px;\n      margin-top: 2px;\n      display: flex;\n      align-items: center;\n    }\n    .tools-container .swatch {\n      width: 12px;\n      height: 12px;\n      border-radius: 4px;\n    }\n    .tools-container .tools {\n      display: flex;\n      gap: 4px;\n      flex-wrap: wrap;\n    }\n    .tools-container .tool {\n      border-radius: 4px;\n      padding: 2px 4px;\n      font-size: 1.7em\n    }\n    .tools-container .category-Analytics {\n      background-color: MistyRose;\n    }\n    .tools-container .category-Business {\n      background-color: SeaShell;\n    }\n    .tools-container .category-Collaboration {\n      background-color: PapayaWhip;\n    }\n    .tools-container .category-Communication {\n      background-color: Beige;\n    }\n    .tools-container .category-Data {\n      background-color: hsl(157deg 47% 93%);\n    }\n    .tools-container .category-Design {\n      background-color: AliceBlue;\n    }\n    .tools-container .category-Developer {\n      background-color: Lavender;\n    }\n    .tools-container .category-Other {\n      background-color: WhiteSmoke;\n    }\n  </style>\n  <div class=\"tools-container\">\n    <div class=\"sidebar\">\n      <div class=\"big-number\"><b>${tools.length}</b> ${description}</div>\n      <div class=\"color-key\">\n        <div>\n          ${categories.sort((a, b) => d3.ascending(a.label, b.label)).map(category => html`<div class=\"color\">\n            <div class=\"swatch category-${category.id}\"></div> ${category.label}\n          </div>`)}\n          </div>\n      </div>\n    </div>\n    <div class=\"tools\">\n    ${tools.sort().map(tool => html`<span class=\"tool category-${tool.category}\">${tool.tool}</span>`)}\n    </div>\n</div>\n  `\n}\n\n\n\n\nlongList(transpose(tools), \"languages / engines supported in Rmarkdown\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource Code\n---\ntitle: \"Quarto\"\nformat:\n  html:\n    toc: false\n    echo: false\n    message: false\n    warning: false\n    keep-hidden: true\n    code-tools: true\n---\n\n```{r,include = FALSE}\nlibrary(tidyverse)\n\ntool_pref <- c(\n  \"R\", \"python\", \"bash\",\"sql\", \"julia\",\n  \"js\", \"node\",\"coffee\", \"sass\", \"ojs\",\n  \"c\",\"fortran\",\"Rcpp\",\"go\",\"perl\"\n)\n\ncategories <- c(\"Analytics\",\"Business\",\"Collaboration\",\"Communication\",\"Data\",\"Design\",\"Developer\",\"Other\")\n\ntool_dat <- names(knitr::knit_engines$get()) %>%\n  tibble(tool = .) %>%\n  mutate(category = sample(categories, nrow(.), replace = TRUE)) %>% \n  select(category,tool) %>% \n  arrange(match(tool,c(tool_pref,base::setdiff(names(knitr::knit_engines$get()),tool_pref))))\n\nojs_define(\n  tools = tool_dat\n  )\n```\n\n\n\n\n## Based on Rmarkdown & language agnostic\n\n```{ojs}\nlongList = function(tools, description) {\n  const categories = [...new Set(tools.map(tool => tool.category))].map(id => ({id, label: id}))\n  return html`\n  <div>\n  <style>\n    .tools-container {\n      display: flex;\n      align-items: flex-start;\n      gap: 20px;\n      padding: 30px 0 20px 0;\n    }\n    .tools-container .sidebar {\n      width: 110px;\n      flex: 1 0 auto;\n    }\n    @media only screen and (min-width: 600px) {\n      .tools-container .sidebar {\n        width: 160px;\n      }\n    }\n    .tools-container .big-number {\n      line-height: 1.5em;\n    }\n    .tools-container .big-number b {\n      display: block;\n      font-size: 48px;\n      line-height: 48px;\n      margin-bottom: 4px;\n    }\n    .tools-container .color-key {\n      border-top: solid 1px rgba(0, 0, 0, 0.08);\n      margin-top: 20px;\n      padding-top: 20px;\n      width: 100%\n    }\n    .tools-container .color {\n      color: #666;\n      display: flex;\n      gap: 8px;\n      margin-top: 2px;\n      display: flex;\n      align-items: center;\n    }\n    .tools-container .swatch {\n      width: 12px;\n      height: 12px;\n      border-radius: 4px;\n    }\n    .tools-container .tools {\n      display: flex;\n      gap: 4px;\n      flex-wrap: wrap;\n    }\n    .tools-container .tool {\n      border-radius: 4px;\n      padding: 2px 4px;\n      font-size: 1.7em\n    }\n    .tools-container .category-Analytics {\n      background-color: MistyRose;\n    }\n    .tools-container .category-Business {\n      background-color: SeaShell;\n    }\n    .tools-container .category-Collaboration {\n      background-color: PapayaWhip;\n    }\n    .tools-container .category-Communication {\n      background-color: Beige;\n    }\n    .tools-container .category-Data {\n      background-color: hsl(157deg 47% 93%);\n    }\n    .tools-container .category-Design {\n      background-color: AliceBlue;\n    }\n    .tools-container .category-Developer {\n      background-color: Lavender;\n    }\n    .tools-container .category-Other {\n      background-color: WhiteSmoke;\n    }\n  </style>\n  <div class=\"tools-container\">\n    <div class=\"sidebar\">\n      <div class=\"big-number\"><b>${tools.length}</b> ${description}</div>\n      <div class=\"color-key\">\n        <div>\n          ${categories.sort((a, b) => d3.ascending(a.label, b.label)).map(category => html`<div class=\"color\">\n            <div class=\"swatch category-${category.id}\"></div> ${category.label}\n          </div>`)}\n          </div>\n      </div>\n    </div>\n    <div class=\"tools\">\n    ${tools.sort().map(tool => html`<span class=\"tool category-${tool.category}\">${tool.tool}</span>`)}\n    </div>\n</div>\n  `\n}\n\n\n\n\nlongList(transpose(tools), \"languages / engines supported in Rmarkdown\")\n\n\n```"
  },
  {
    "objectID": "rmd.html#section",
    "href": "rmd.html#section",
    "title": "Rmarkdown",
    "section": "",
    "text": "library(tidyverse)\n\nâ”€â”€ Attaching packages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 1.3.1 â”€â”€\n\n\nâœ“ ggplot2 3.3.5     âœ“ purrr   0.3.4\nâœ“ tibble  3.1.6     âœ“ dplyr   1.0.7\nâœ“ tidyr   1.1.4     âœ“ stringr 1.4.0\nâœ“ readr   2.1.1     âœ“ forcats 0.5.1\n\n\nâ”€â”€ Conflicts â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\n\nlibrary(highcharter)\n\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\ndata <- tibble(\n  country =\n    c(\n      \"PT\", \"IE\", \"GB\", \"IS\",\n      \"NO\", \"SE\", \"DK\", \"DE\", \"NL\", \"BE\", \"LU\", \"ES\", \"FR\", \"PL\", \"CZ\", \"AT\",\n      \"CH\", \"LI\", \"SK\", \"HU\", \"SI\", \"IT\", \"SM\", \"HR\", \"BA\", \"YF\", \"ME\", \"AL\", \"MK\",\n      \"FI\", \"EE\", \"LV\", \"LT\", \"BY\", \"UA\", \"MD\", \"RO\", \"BG\", \"GR\", \"TR\", \"CY\",\n      \"RU\"\n    ),\n  tz = c(rep(\"UTC\", 4), rep(\"UTC + 1\", 25), rep(\"UCT + 2\", 12), \"UTC + 3\")\n)\n\n# auxiliar variable\ndata <- data %>%\n  mutate(value = cumsum(!duplicated(tz)))\n\n\n# now we'll create the dataClasses\ndta_clss <- data %>%\n  mutate(value = cumsum(!duplicated(tz))) %>%\n  group_by(tz) %>%\n  summarise(value = unique(value)) %>%\n  arrange(value) %>%\n  rename(name = tz, from = value) %>%\n  mutate(to = from + 1) %>%\n  list_parse()\n\nhcmap(\n  map = \"custom/europe\",\n  data = data,\n  joinBy = c(\"iso-a2\", \"country\"),\n  name = \"Time zone\",\n  value = \"value\",\n  tooltip = list(pointFormat = \"{point.name} {point.tz}\"),\n  dataLabels = list(enabled = TRUE, format = \"{point.country}\")\n) %>%\n  hc_colorAxis(\n    dataClassColor = \"category\",\n    dataClasses = dta_clss\n  ) %>%\n  hc_title(text = \"Europe Time Zones\")\n\n\n\n\n\nsource: https://jkunst.com/highcharter/articles/maps.html"
  },
  {
    "objectID": "rmd.html#that-looks-like-observablejs-inputs",
    "href": "rmd.html#that-looks-like-observablejs-inputs",
    "title": "Rmarkdown",
    "section": "& that looks like observableJS inputs",
    "text": "& that looks like observableJS inputs\nA simple example based on Allison Horstâ€™s Palmer Penguins dataset.\nSource: https://quarto.org/docs/gallery/\n\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotData\n\n\n\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n\n\n\n\n\n\n\n\n\nInputs.table(filtered)\n\n\n\n\n\n\n\n\n\n\nfiltered = transpose(data).filter(function(penguin) {\n  return bill_length_min < penguin.bill_length &&\n         islands.includes(penguin.island);\n})"
  },
  {
    "objectID": "obs.html#data-practitioners-data-specialists-and-their-collaborators",
    "href": "obs.html#data-practitioners-data-specialists-and-their-collaborators",
    "title": "Observable D3",
    "section": "Data Practitioners: data specialists and their collaborators",
    "text": "Data Practitioners: data specialists and their collaborators\n\nimport {pieChart} from \"d/cf42a44ac2f24b7a\"\n\n\n\n\n\n\n\nroles = d3.tsvParse(`Role   dataRole    pct count\nHobbyist    support 30.6    174\nFront-end developer support 14.2    81\nAcademic or government researcher   support 14.2    81\nData analyst or business analyst    primary 9.65    55\nData scientist  primary 7.37    42\nData architect  primary 3.3 19\nStudent support 5.61    32\nEducator    support 5.09    29\nJournalist  support 2.98    17\nOther   support 6.32    39`, d3.autoType)\n\n\n\n\n\n\n\npieChart(roles, \"Role\", \"count\", \"dataRole\", \"Responses for data-centered roles\")\n\n\n\n\n\n\n\nimport {ToolsImage} from \"@observablehq/state-of-dataviz-2021\"\n\n\nToolsImage\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource: https://observablehq.com/@observablehq/state-of-dataviz-2021"
  },
  {
    "objectID": "js.html",
    "href": "js.html",
    "title": "Javascript",
    "section": "",
    "text": "CLICK ON A STATE TO DRILLDOWN\n\n\n\n\n\n\n\n\n\n\n/*\nTODO:\n- Check data labels after drilling. Label rank? New positions?\n*/\n\n\n\ndata = Highcharts.geojson(Highcharts.maps['countries/us/us-all']);\nconst separators = Highcharts.geojson(Highcharts.maps['countries/us/us-all'], 'mapline');\n\n// Set drilldown pointers\ndata.forEach((d, i) => {\n  d.drilldown = d.properties['hc-key'];\n  d.value = i; // Non-random bogus data\n});\n\nfunction getScript(url, cb) {\n  const script = document.createElement('script');\n  script.src = url;\n  script.onload = cb;\n  document.head.appendChild(script);\n}\n\n// Instantiate the map\nHighcharts.mapChart('container', {\n  chart: {\n    events: {\n      drilldown: function (e) {\n        if (!e.seriesOptions) {\n          const chart = this,\n            mapKey = 'countries/us/' + e.point.drilldown + '-all';\n\n          // Handle error, the timeout is cleared on success\n          let fail = setTimeout(() => {\n            if (!Highcharts.maps[mapKey]) {\n              chart.showLoading('<i class=\"icon-frown\"></i> Failed loading ' + e.point.name);\n              fail = setTimeout(() => {\n                chart.hideLoading();\n              }, 1000);\n            }\n          }, 3000);\n\n          // Show the spinner\n          chart.showLoading('<i class=\"icon-spinner icon-spin icon-3x\"></i>'); // Font Awesome spinner\n\n          // Load the drilldown map\n          getScript('https://code.highcharts.com/mapdata/' + mapKey + '.js', () => {\n            data = Highcharts.geojson(Highcharts.maps[mapKey]);\n\n            // Set a non-random bogus value\n            data.forEach((d, i) => {\n              d.value = i;\n            });\n\n            // Hide loading and add series\n            chart.hideLoading();\n            clearTimeout(fail);\n            chart.addSeriesAsDrilldown(e.point, {\n              name: e.point.name,\n              data: data,\n              dataLabels: {\n                enabled: true,\n                format: '{point.name}'\n              }\n            });\n          });\n        }\n\n        this.setTitle(null, { text: e.point.name });\n      },\n      drillup: function () {\n        this.setTitle(null, { text: '' });\n      }\n    }\n  },\n\n  title: {\n    text: 'Highcharts Map Drilldown'\n  },\n\n  subtitle: {\n    text: '',\n    floating: true,\n    align: 'right',\n    y: 50,\n    style: {\n      fontSize: '16px'\n    }\n  },\n\n  colorAxis: {\n    min: 0,\n    minColor: '#E6E7E8',\n    maxColor: '#005645'\n  },\n\n  mapNavigation: {\n    enabled: true,\n    buttonOptions: {\n      verticalAlign: 'bottom'\n    }\n  },\n\n  plotOptions: {\n    map: {\n      states: {\n        hover: {\n          color: '#EEDD66'\n        }\n      }\n    }\n  },\n\n  series: [{\n    data: data,\n    name: 'USA',\n    dataLabels: {\n      enabled: true,\n      format: '{point.properties.postal-code}'\n    }\n  }, {\n    type: 'mapline',\n    data: separators,\n    color: 'silver',\n    enableMouseTracking: false,\n    animation: {\n      duration: 500\n    }\n  }],\n\n  drilldown: {\n    activeDataLabelStyle: {\n      color: '#FFFFFF',\n      textDecoration: 'none',\n      textOutline: '1px #000000'\n    },\n    drillUpButton: {\n      relativeTo: 'spacingBox',\n      position: {\n        x: 0,\n        y: 60\n      }\n    }\n  }\n});\n\nsource: https://www.highcharts.com/demo/maps/map-drilldown"
  },
  {
    "objectID": "obs.html#observable-inputs-based-on-r-data",
    "href": "obs.html#observable-inputs-based-on-r-data",
    "title": "Observable D3",
    "section": "observable inputs based on R data",
    "text": "observable inputs based on R data\n\nojs_define(\n  data = readr::read_csv(\"https://raw.githubusercontent.com/quarto-dev/quarto-web/8159986c9ea1c956b9340663b2a4f03f3b75c9e2/docs/interactive/ojs/examples/palmer-penguins.csv\")\n  )\n\nRows: 344 Columns: 7\n\n\nâ”€â”€ Column specification â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\nDelimiter: \",\"\nchr (3): species, island, sex\ndbl (4): bill_length, bill_depth, flipper_length, body_mass\n\n\n\nâ„¹ Use `spec()` to retrieve the full column specification for this data.\nâ„¹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotData\n\n\n\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n\n\n\n\n\n\n\n\n\nInputs.table(filtered)\n\n\n\n\n\n\n\n\n\n\nfiltered = transpose(data).filter(function(penguin) {\n  return bill_length_min < penguin.bill_length &&\n         islands.includes(penguin.island);\n})"
  }
]