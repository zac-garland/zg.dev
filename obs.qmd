---
title: "Observable D3"
format:
  html:
    toc: false
    echo: false
    message: false
    warning: false
    keep-hidden: true
    code-tools: true
---


## Data Practitioners: data specialists and their collaborators

```{ojs}
import {pieChart} from "d/cf42a44ac2f24b7a"

```


```{ojs}
roles = d3.tsvParse(`Role	dataRole	pct	count
Hobbyist	support	30.6	174
Front-end developer	support	14.2	81
Academic or government researcher	support	14.2	81
Data analyst or business analyst	primary	9.65	55
Data scientist	primary	7.37	42
Data architect	primary	3.3	19
Student	support	5.61	32
Educator	support	5.09	29
Journalist	support	2.98	17
Other	support	6.32	39`, d3.autoType)
```


```{ojs}
pieChart(roles, "Role", "count", "dataRole", "Responses for data-centered roles")
```

```{ojs}
import {ToolsImage} from "@observablehq/state-of-dataviz-2021"


ToolsImage
```



Source: <https://observablehq.com/@observablehq/state-of-dataviz-2021>


## observable inputs based on R data

```{r}
ojs_define(
  data = readr::read_csv("https://raw.githubusercontent.com/quarto-dev/quarto-web/8159986c9ea1c956b9340663b2a4f03f3b75c9e2/docs/interactive/ojs/examples/palmer-penguins.csv")
  )
```

```{ojs}
//| panel: input
viewof bill_length_min = Inputs.range(
  [32, 50], 
  {value: 35, step: 1, label: "Bill length (min):"}
)
viewof islands = Inputs.checkbox(
  ["Torgersen", "Biscoe", "Dream"], 
  { value: ["Torgersen", "Biscoe"], 
    label: "Islands:"
  }
)
```

::: panel-tabset





## Plot

```{ojs}
Plot.rectY(filtered, 
  Plot.binX(
    {y: "count"}, 
    {x: "body_mass", fill: "species", thresholds: 20}
  ))
  .plot({
    facet: {
      data: filtered,
      x: "sex",
      y: "species",
      marginRight: 80
    },
    marks: [
      Plot.frame(),
    ]
  }
)
```

## Data

```{ojs}
Inputs.table(filtered)
```



:::


```{ojs}
filtered = transpose(data).filter(function(penguin) {
  return bill_length_min < penguin.bill_length &&
         islands.includes(penguin.island);
})
```


